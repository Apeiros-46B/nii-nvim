# vim:foldmethod=marker

# {{{ misc
snippet "sout" "System.out.println(...);" rbA
System.out.println($0);
endsnippet

snippet "read" "String ... = in.readLine()" A
String ${0:str} = in.readLine();
endsnippet

snippet "readint" "int ... = Integer.parseInt(in.readLine())" A
int ${0:n} = Integer.parseInt(in.readLine());
endsnippet
# }}}

# {{{ main method
snippet main "public static void main ..."
public static void main(String[] args) {
	${0:// method body}
}
endsnippet

snippet emain "public static void main ..."
public static void main(String[] args) throws ${1:Exception} {
	${0:// method body}
}
endsnippet

# }}}

# {{{ class with BufferedReader and main method
# r for reader
snippet rclass "class ... BufferedReader in = ..."
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class `!p snip.rv = snip.basename` {
	public static void main(String[] args) throws Exception {
		final BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		${0:// method body}
	}
}
endsnippet
# }}}

# {{{ classes
snippet class "class ..."
${1:modifiers }class `!p snip.rv = snip.basename` {
	${0:// class body}
}
endsnippet

# extends
snippet eclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename` extends ${3:superclass} {
	${0:// class body}
}
endsnippet

# implements
snippet iclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename` implements ${2:interface} {
	${0:// class body}
}
endsnippet

# extends + implements
snippet eiclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename` extends ${2:superclass} implements ${3:interface} {
	${0:// class body}
}
endsnippet
# }}}

# {{{ parameterized classes
snippet tclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename`<${2:type parameters}> {
	${0:// class body}
}
endsnippet

# extends
snippet etclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename`<${2:type parameters}> extends ${3:superclass} {
	${0:// class body}
}
endsnippet

# implements
snippet itclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename`<${2:type parameters}> implements ${3:interface} {
	${0:// class body}
}
endsnippet

# extends + implements
snippet eitclass "class ..."
${1:modifiers }class `!p snip.rv = snip.basename`<${2:type parameters}> extends ${3:superclass} implements ${4:interface} {
	${0:// class body}
}
endsnippet
# }}}
